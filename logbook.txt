winnav logbook

===================
Week 1 - 23/10/2017
===================
24/10/2017
Started the project. Added functionality of moving windows to any side of the screen.

26/10/2017
While testing the so far basic feature of moving windows, I've found many things that will need to be addressed. Firstly I have to figure out and implement how to make this feature work with multiple monitors as in its current state it's bugged.
Secondly, I've realised some windows have a maximum size limit, for example the windows command line. I don't know how to bypass this, how to maybe override the maximum size limit.
Thirdly, the hotkeys I'm currently using are Left Windows Key + Left Shift (+ and arrow keys for moving windows). The issue here is that Windows by default uses that combination (without the arrow keys) to switch between keyboard languages. At least that's the combination in Windows 7, which is the version of Windows I'm testing this on. The user will either have to make sure to always press the full key combination to not accidentally switch his keyboard language or I will have to find another key combination which is just as handy, and Windows doesn't use it by default. Another regarding the hotkeys is that if the user runs this program, and has already got a program that has this particular combination registered, it will break their program. I will have to give the option for the user to register their own preferred combination.
Fourth, Windows doesn't allow to register hotkeys with more than one normal keys. Normal keys mean any keys that are not Mod keys which are Alt, Shift, Windows key etc. I was hoping I would register the pressing of two arrow keys at once, e.g. up and left arrow, to send a window to the top-left corner. I have to figure out how to achieve this. What I was thinking is: the user would press any arrow key, the program would check to see if the window is at a particular position already and act appropriately. So if the window was at the top side of the screen, the user would press left, it would send the window to the top-left corner. However this solution I imagine would be very messy, and the code I'd end up with would be hard to maintain and not very efficient. I need to look through the winapi to see if Windows has anything like an event handler for keys.

===================
Week 2 - 30/10/2017
===================

31/10/2017
I've addded arbitrary hotkey shortcuts to test whether moving a window to the corners works. It does. The problem is that the shortcut is not used with arrow keys, but somewhere else on the keyboard. I cannot figure out how to implement 8 different shortcuts (4 sides + 4 corners) using 4 keys (arrow keys) as Windows doesnt' allow registering more than one non-modifier key as a shortcut. I've asked about this on StackOverflow: https://stackoverflow.com/questions/46221188/windows-api-registering-a-hotkey-with-multiple-keys-combination. A user recommended using a low-level keyboard hook. If I don't find any alternative it will be either this, having corner shortcuts somewhere else than the sides shortcuts, which I really would not want, or designing the program in such a way that would require to first send a window to the side to send it to the corner, which is not what I would want either.

I've also might have found a solution to the problem of some windows having a limit on their maximum size. There is a MINMAXINFO structure that I can use to override the minimum or maximum size limit of a window. The question here now is should I let the user resize the window like this? There is potential risk that it might break it. I could also ignore the min max limit and let the user send any window anywhere without overriding it's max size limit. Maybe it wouldn't look good but it would be safe to use. I might also just give the option to the user to set how the program should behave in a case like this and let them decide.

===================
Week 3 - 6/11/2017
===================
During a meeting with the supervisor in the previous week, we discussed various options on which hotkeys the user could use to move windows. The original idea was Mod keys + arrow keys. For moving to corners the user would press a combination of two arrow keys. However, the Windows API restricts having more than two non Mod keys being pressed at once as a hotkey. I have thought about using the numpad as hotkeys as it has normal arrows as well as 1, 3, 7, 9, which would be used for corners. The problem with that is that one, the user would have to move his hand all the way to the right side of the keyboard, which would be a little slow, and considering the main aim of this project is to increase the speed and ease of navigating windows, this is a bad idea. Secondly, many keyboards do not have a numpad. What I decided is to use I, J, K, L, keys for top, left, right, bottom and N, M, comma, full stop for corners. The I, J, K, L keys are well known to developers (my target audience for this project) as navigational keys. The corner keys could need a little time to get used to. There's always a possibility that I will decide to go with something else if I find a solution. Also I probably will implement an option for the user to set his own set of hotkeys. And there's still a problem of some programs using these keys as their own shortcuts. Setting the shortcuts to eight non mod normal keys on the keyboard increases the chances that the hotkeys will override a program's shortucts.

Having done the above, the arrow keys are currently free for some other functionality. There's a possibility I will implement moving windows to different monitors using the arrow keys. While Windows has this built in (Windows Key + arrows), it doesn't preserve the window's size. Well it does but the user has to press the hotkey multiple times depending where the window is, to get the window to be in the same place and size on a different monitor.

Currently, I implemented the functionality of moving a window to any part of the screen, on multiple monitors. I have only tested this with two monitors, the primary monitor on the left and the second monitor on the right. It works, however considering how WinAPI handles multiple monitors, I strongly suspect there will be problems when the monitor configuration is different, for example two monitors, one below the other one, or one on the left of the other one. I will probably have to change the window moving logic.

I have also found out that Windows 10 has this functionality by default, but using it requires arrow keys and pressing them multiple times to get the window to the desired position. Previous versions of Windows however, do not have this functionality.

An idea for an extra feature that uses the mouse has came up. It would be a feature that would allow the user to resize multiple windows at once. For example if the user has three windows open on one monitor, two stacked on one side of the screen in top and bottom corners, and one window taking the whole other side of the screen, resizing one window using the mouse, would cause the other windows to be resized to fit. I am aware that this might be out of scope for this project, that this might be too hard or can take too long too implement and that I have no idea yet of how to handle mouse events using the Windows API, but it's a possibility.

For next week, I plan to test moving windows on multiple monitor configurations and probably fix bugs that I will find. I will also test with different monitors having different resolutions. I don't think I will find any problems with this but there probably will be.

===================
Week 4 - 13/11/2017
===================
I have fixed some minor bugs. Window moving now works on any screen in two monitor configurations.

I have noticed a weird bug while testing on Windows 10. Whenever moving a window anywhere, there is always a gap about 10 pixels big between the window and the edge of the screen. This occurs on any side of the screen except the top part. I haven't noticed anything like this on Windows 7.

There is another bug I have noticed. When resizing a console window of the program Git Bash using my program, the text in the console increases size greatly, as I resize it to a bigger size. When I resize it using any other windows way, whether it's a hotkey or using a mouse this doesn't happen. I strongly suspect I can fix this. I'm resizing the window by calling a WinAPI function SetWindowPos(...). There can be some flags passed to that function that determine how the window behaves when that function is called (e.g. whether the window should be redrawn etc.). I think the reason this bug is here is because the lack fo some flags. I also wonder how many other programs I can break with my window manager.